{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48],"program":"/home/maxtnt/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","ws","/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=9ef3cd8ee7a64c96","-C","extra-filename=-9ef3cd8ee7a64c96","--out-dir","/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps","-L","dependency=/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps","--extern","byteorder=/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps/libbyteorder-1d0fd571c260d8b0.rmeta","--extern","bytes=/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps/libbytes-4c1af5357c405e6a.rmeta","--extern","httparse=/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps/libhttparse-efdc4f5531918ad0.rmeta","--extern","log=/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps/liblog-d6bcafd650bf6634.rmeta","--extern","mio=/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps/libmio-d3b27cf22f24f315.rmeta","--extern","mio_extras=/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps/libmio_extras-cd3a9802c3f233b4.rmeta","--extern","rand=/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps/librand-180494bd0ddebeb0.rmeta","--extern","sha1=/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps/libsha1-e9a85a86b7c1df96.rmeta","--extern","slab=/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps/libslab-03c6c73f08c12c35.rmeta","--extern","url=/home/maxtnt/workspace/rust_wasm_game/target/rls/debug/deps/liburl-ab8b9e8dabe0e22c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/maxtnt/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,109,97,120,116,110,116,47,119,111,114,107,115,112,97,99,101,47,114,117,115,116,95,119,97,115,109,95,103,97,109,101,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,119,115,45,57,101,102,51,99,100,56,101,101,55,97,54,52,99,57,54,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"ws","disambiguator":[913018344143252201,9184669128726132937]},"crate_root":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src","external_crates":[{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15710388648575693943,12180200544600090568]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[13418344307072335498,2365261765259317235]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4299894358967212659,8903193211698367119]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9626415080999725921,9367011870642440112]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3698294317287057058,9712783554978179817]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1981511630799727387,7773896680855696227]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[12980902390395680634,8980187772762003708]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[18343874952378907160,4349387471149273889]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[15982360707109281171,1229368521786680684]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[13262711781632011351,9172904506273317685]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":11,"id":{"name":"byteorder","disambiguator":[261631109475840275,14371000433476799877]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":12,"id":{"name":"bytes","disambiguator":[16360471394357784530,6278337475263629221]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":13,"id":{"name":"iovec","disambiguator":[5903859142958845390,7165047855127208983]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":14,"id":{"name":"libc","disambiguator":[2361286746013994915,3606816307320814436]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":15,"id":{"name":"httparse","disambiguator":[17965790674354177382,14582316486605414009]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":16,"id":{"name":"mio","disambiguator":[9173602695431556039,13571876442518829767]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":17,"id":{"name":"lazycell","disambiguator":[3423786136952287997,17712989262414798875]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":18,"id":{"name":"net2","disambiguator":[18005834512955825085,16111297120562502960]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":19,"id":{"name":"cfg_if","disambiguator":[521937098720898473,2871395333780493780]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":20,"id":{"name":"slab","disambiguator":[3292368485634688359,1285527081653971777]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":21,"id":{"name":"log","disambiguator":[16900240418280878955,7278393531869217985]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":22,"id":{"name":"mio_extras","disambiguator":[18094028963686412398,9571794598433358146]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":23,"id":{"name":"rand","disambiguator":[1680382912444453030,17040896141827944486]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":24,"id":{"name":"rand_jitter","disambiguator":[6228375368184020021,13294001041067366124]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":25,"id":{"name":"rand_core","disambiguator":[476103235432578718,5487616044266870979]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":26,"id":{"name":"rand_os","disambiguator":[15337858194055020050,11770065891566360374]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":27,"id":{"name":"rand_isaac","disambiguator":[14963478647597929762,4654431717004629994]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":28,"id":{"name":"rand_core","disambiguator":[13455932664818392475,4886894433428468356]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":29,"id":{"name":"rand_chacha","disambiguator":[9293984666212040054,4912296076025022632]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":30,"id":{"name":"rand_hc","disambiguator":[13146377542560580686,16909818643822803391]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":31,"id":{"name":"rand_pcg","disambiguator":[17402626587933413322,6131946991506345081]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":32,"id":{"name":"rand_xorshift","disambiguator":[2276356076001385959,13482007302429521386]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":33,"id":{"name":"sha1","disambiguator":[7142787700816059479,1442021897989127372]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":34,"id":{"name":"url","disambiguator":[3204597831887509049,7221563643837368196]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":35,"id":{"name":"matches","disambiguator":[1949706843428195219,15329301715165580513]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":36,"id":{"name":"idna","disambiguator":[6195089993522838235,7468897393495533116]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":37,"id":{"name":"unicode_bidi","disambiguator":[13897348950770368192,6106999296460153297]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":38,"id":{"name":"unicode_normalization","disambiguator":[12931154511283769549,11869615823806738479]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":39,"id":{"name":"smallvec","disambiguator":[666210017201118074,15462146483599450990]}},{"file_name":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","num":40,"id":{"name":"percent_encoding","disambiguator":[10091682610942114713,678107128182293804]}}],"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":13768,"line_start":1,"line_end":391,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":3200},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":196814,"byte_end":196819,"line_start":4,"line_end":4,"column_start":14,"column_end":19},"alias_span":null,"name":"Token","value":"","parent":{"krate":0,"index":1052}},{"kind":"Use","ref_id":{"krate":22,"index":334},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":196884,"byte_end":196891,"line_start":6,"line_end":6,"column_start":28,"column_end":35},"alias_span":null,"name":"Timeout","value":"","parent":{"krate":0,"index":1052}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":754,"byte_end":761,"line_start":39,"line_end":39,"column_start":18,"column_end":25},"alias_span":null,"name":"Factory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":458},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":780,"byte_end":787,"line_start":40,"line_end":40,"column_start":18,"column_end":25},"alias_span":null,"name":"Handler","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1158},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":813,"byte_end":819,"line_start":42,"line_end":42,"column_start":24,"column_end":30},"alias_span":null,"name":"Sender","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1204},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":836,"byte_end":841,"line_start":43,"line_end":43,"column_start":16,"column_end":21},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1228},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":863,"byte_end":872,"line_start":44,"line_end":44,"column_start":21,"column_end":30},"alias_span":null,"name":"Handshake","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1234},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":874,"byte_end":881,"line_start":44,"line_end":44,"column_start":32,"column_end":39},"alias_span":null,"name":"Request","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1240},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":883,"byte_end":891,"line_start":44,"line_end":44,"column_start":41,"column_end":49},"alias_span":null,"name":"Response","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1258},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":911,"byte_end":918,"line_start":45,"line_end":45,"column_start":18,"column_end":25},"alias_span":null,"name":"Message","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1298},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":939,"byte_end":948,"line_start":46,"line_end":46,"column_start":20,"column_end":29},"alias_span":null,"name":"CloseCode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1278},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":950,"byte_end":956,"line_start":46,"line_end":46,"column_start":31,"column_end":37},"alias_span":null,"name":"OpCode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1320},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":975,"byte_end":979,"line_start":47,"line_end":47,"column_start":17,"column_end":21},"alias_span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":983,"byte_end":992,"line_start":47,"line_end":47,"column_start":25,"column_end":34},"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":944},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1011,"byte_end":1016,"line_start":48,"line_end":48,"column_start":18,"column_end":23},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":942},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1018,"byte_end":1024,"line_start":48,"line_end":48,"column_start":25,"column_end":31},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":13768,"line_start":1,"line_end":391,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":100},{"krate":0,"index":250},{"krate":0,"index":312},{"krate":0,"index":424},{"krate":0,"index":518},{"krate":0,"index":660},{"krate":0,"index":808},{"krate":0,"index":874},{"krate":0,"index":916},{"krate":0,"index":986},{"krate":0,"index":1052},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1090},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1102},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1326},{"krate":0,"index":1334},{"krate":0,"index":1330},{"krate":0,"index":1328},{"krate":0,"index":1108},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1338},{"krate":0,"index":1350},{"krate":0,"index":1346},{"krate":0,"index":1342},{"krate":0,"index":1340},{"krate":0,"index":1130}],"decl_id":null,"docs":" Lightweight, event-driven WebSockets for Rust.\n","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51,"byte_end":72,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"deny(missing_copy_implementations,\n       trivial_casts,\n       trivial_numeric_casts,\n       unstable_features,\n       unused_import_braces)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":73,"byte_end":198,"line_start":3,"line_end":4,"column_start":1,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":255},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14050,"byte_end":14057,"line_start":18,"line_end":18,"column_start":5,"column_end":12},"name":"Message","qualname":"::communication::Signal::Message","value":"Signal::Message(message::Message)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":259},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14081,"byte_end":14086,"line_start":19,"line_end":19,"column_start":5,"column_end":10},"name":"Close","qualname":"::communication::Signal::Close","value":"Signal::Close(CloseCode, Cow<'static, str>)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":265},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14122,"byte_end":14126,"line_start":20,"line_end":20,"column_start":5,"column_end":9},"name":"Ping","qualname":"::communication::Signal::Ping","value":"Signal::Ping(Vec<u8>)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":269},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14141,"byte_end":14145,"line_start":21,"line_end":21,"column_start":5,"column_end":9},"name":"Pong","qualname":"::communication::Signal::Pong","value":"Signal::Pong(Vec<u8>)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":273},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14160,"byte_end":14167,"line_start":22,"line_end":22,"column_start":5,"column_end":12},"name":"Connect","qualname":"::communication::Signal::Connect","value":"Signal::Connect(url::Url)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":277},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14183,"byte_end":14191,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"name":"Shutdown","qualname":"::communication::Signal::Shutdown","value":"Signal::Shutdown","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":279},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14197,"byte_end":14204,"line_start":24,"line_end":24,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::communication::Signal::Timeout","value":"Signal::Timeout { delay, token }","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":285},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14239,"byte_end":14245,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Cancel","qualname":"::communication::Signal::Cancel","value":"Signal::Cancel(Timeout)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1138},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14037,"byte_end":14043,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Signal","qualname":"::communication::Signal","value":"Signal::{Message, Close, Ping, Pong, Connect, Shutdown, Timeout, Cancel}","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":259},{"krate":0,"index":265},{"krate":0,"index":269},{"krate":0,"index":273},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":285}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1148},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14294,"byte_end":14301,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"Command","qualname":"::communication::Command","value":"Command {  }","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":293}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14395,"byte_end":14400,"line_start":36,"line_end":36,"column_start":12,"column_end":17},"name":"token","qualname":"<Command>::token","value":"fn (&self) -> Token","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14456,"byte_end":14467,"line_start":40,"line_end":40,"column_start":12,"column_end":23},"name":"into_signal","qualname":"<Command>::into_signal","value":"fn (self) -> Signal","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14524,"byte_end":14537,"line_start":44,"line_end":44,"column_start":12,"column_end":25},"name":"connection_id","qualname":"<Command>::connection_id","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1158},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14735,"byte_end":14741,"line_start":52,"line_end":52,"column_start":12,"column_end":18},"name":"Sender","qualname":"::communication::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":299}],"decl_id":null,"docs":" A representation of the output of the WebSocket connection. Use this to send messages to the\n other endpoint.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15318,"byte_end":15321,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<Sender>::new","value":"fn (token: Token, channel: mio::channel::SyncSender<Command>, connection_id: u32) -> Sender","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15297,"byte_end":15306,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15631,"byte_end":15636,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"token","qualname":"<Sender>::token","value":"fn (&self) -> Token","parent":null,"children":[],"decl_id":null,"docs":" A Token identifying this sender within the WebSocket.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15610,"byte_end":15619,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15776,"byte_end":15789,"line_start":95,"line_end":95,"column_start":12,"column_end":25},"name":"connection_id","qualname":"<Sender>::connection_id","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" A connection_id identifying this sender within the WebSocket.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15755,"byte_end":15764,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15909,"byte_end":15913,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender>::send","value":"fn <M> (&self, msg: M) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a message over the connection.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15888,"byte_end":15897,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":16829,"byte_end":16838,"line_start":122,"line_end":122,"column_start":12,"column_end":21},"name":"broadcast","qualname":"<Sender>::broadcast","value":"fn <M> (&self, msg: M) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a message to the endpoints of all connections.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":16808,"byte_end":16817,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":17233,"byte_end":17238,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"close","qualname":"<Sender>::close","value":"fn (&self, code: CloseCode) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a close code to the other endpoint.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":17212,"byte_end":17221,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":17623,"byte_end":17640,"line_start":149,"line_end":149,"column_start":12,"column_end":29},"name":"close_with_reason","qualname":"<Sender>::close_with_reason","value":"fn <S> (&self, code: CloseCode, reason: S) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a close code and provide a descriptive reason for closing.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":17602,"byte_end":17611,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":18089,"byte_end":18093,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"ping","qualname":"<Sender>::ping","value":"fn (&self, data: Vec<u8>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a ping to the other endpoint with the given test data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":18068,"byte_end":18077,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":18471,"byte_end":18475,"line_start":176,"line_end":176,"column_start":12,"column_end":16},"name":"pong","qualname":"<Sender>::pong","value":"fn (&self, data: Vec<u8>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a pong to the other endpoint responding with the given test data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":18450,"byte_end":18459,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":18845,"byte_end":18852,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"connect","qualname":"<Sender>::connect","value":"fn (&self, url: url::Url) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Queue a new connection on this WebSocket to the specified URL.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":18824,"byte_end":18833,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":19237,"byte_end":19245,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"shutdown","qualname":"<Sender>::shutdown","value":"fn (&self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Request that all connections terminate and that the WebSocket stop running.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":19216,"byte_end":19225,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":19644,"byte_end":19651,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"timeout","qualname":"<Sender>::timeout","value":"fn (&self, ms: u64, token: Token) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Schedule a `token` to be sent to the WebSocket Handler's `on_timeout` method\n after `ms` milliseconds\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":19623,"byte_end":19632,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":20275,"byte_end":20281,"line_start":229,"line_end":229,"column_start":12,"column_end":18},"name":"cancel","qualname":"<Sender>::cancel","value":"fn (&self, timeout: Timeout) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Queue the cancellation of a previously scheduled timeout.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":20254,"byte_end":20263,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":69464,"byte_end":69471,"line_start":5,"line_end":5,"column_start":11,"column_end":18},"name":"Factory","qualname":"::factory::Factory","value":"Factory","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268}],"decl_id":null,"docs":" A trait for creating new WebSocket handlers.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":69483,"byte_end":69490,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"name":"Handler","qualname":"::factory::Factory::Handler","value":"type Handler: Handler;","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":69555,"byte_end":69570,"line_start":9,"line_end":9,"column_start":8,"column_end":23},"name":"connection_made","qualname":"::factory::Factory::connection_made","value":"fn (&mut self, _: Sender) -> Self::Handler","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Called when a TCP connection is made.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":69685,"byte_end":69696,"line_start":13,"line_end":13,"column_start":8,"column_end":19},"name":"on_shutdown","qualname":"::factory::Factory::on_shutdown","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Called when the WebSocket is shutting down.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":69668,"byte_end":69677,"line_start":12,"line_end":12,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":70751,"byte_end":70767,"line_start":52,"line_end":52,"column_start":8,"column_end":24},"name":"client_connected","qualname":"::factory::Factory::client_connected","value":"fn (&mut self, ws: Sender) -> Self::Handler","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Called when a new connection is established for a client endpoint.\n This method can be used to differentiate a client aspect for a handler.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":70734,"byte_end":70743,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":71808,"byte_end":71824,"line_start":90,"line_end":90,"column_start":8,"column_end":24},"name":"server_connected","qualname":"::factory::Factory::server_connected","value":"fn (&mut self, ws: Sender) -> Self::Handler","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Called when a new connection is established for a server endpoint.\n This method can be used to differentiate a server aspect for a handler.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":71791,"byte_end":71800,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":72257,"byte_end":72272,"line_start":101,"line_end":101,"column_start":8,"column_end":23},"name":"connection_lost","qualname":"::factory::Factory::connection_lost","value":"fn (&mut self, _: Self::Handler) -> ()","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Called when a TCP connection is lost with the handler that was\n setup for that connection.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":72240,"byte_end":72249,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1204},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":74749,"byte_end":74754,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Frame","qualname":"::frame::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":341}],"decl_id":null,"docs":" A struct representing a WebSocket frame.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75044,"byte_end":75047,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"len","qualname":"<Frame>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the frame.\n This is the length of the header + the length of the payload.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75023,"byte_end":75032,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75567,"byte_end":75575,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Frame>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `false`: a frame is never empty since it has a header.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75546,"byte_end":75555,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75688,"byte_end":75696,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_final","qualname":"<Frame>::is_final","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the frame is a final frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75667,"byte_end":75676,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75820,"byte_end":75828,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"has_rsv1","qualname":"<Frame>::has_rsv1","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the first reserved bit is set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75799,"byte_end":75808,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75949,"byte_end":75957,"line_start":75,"line_end":75,"column_start":12,"column_end":20},"name":"has_rsv2","qualname":"<Frame>::has_rsv2","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the second reserved bit is set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75928,"byte_end":75937,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76077,"byte_end":76085,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"has_rsv3","qualname":"<Frame>::has_rsv3","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the third reserved bit is set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76056,"byte_end":76065,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76190,"byte_end":76196,"line_start":87,"line_end":87,"column_start":12,"column_end":18},"name":"opcode","qualname":"<Frame>::opcode","value":"fn (&self) -> OpCode","parent":null,"children":[],"decl_id":null,"docs":" Get the OpCode of the frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76169,"byte_end":76178,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76314,"byte_end":76324,"line_start":93,"line_end":93,"column_start":12,"column_end":22},"name":"is_control","qualname":"<Frame>::is_control","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether this is a control frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76293,"byte_end":76302,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76455,"byte_end":76462,"line_start":99,"line_end":99,"column_start":12,"column_end":19},"name":"payload","qualname":"<Frame>::payload","value":"fn (&self) -> &Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the frame's payload.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76434,"byte_end":76443,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76598,"byte_end":76607,"line_start":106,"line_end":106,"column_start":12,"column_end":21},"name":"is_masked","qualname":"<Frame>::is_masked","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76577,"byte_end":76586,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76782,"byte_end":76786,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"mask","qualname":"<Frame>::mask","value":"fn (&self) -> Option<&[u8; 4]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76737,"byte_end":76756,"line_start":112,"line_end":112,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76761,"byte_end":76770,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76938,"byte_end":76947,"line_start":121,"line_end":121,"column_start":12,"column_end":21},"name":"set_final","qualname":"<Frame>::set_final","value":"fn (&mut self, is_final: bool) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":" Make this frame a final frame.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76893,"byte_end":76912,"line_start":119,"line_end":119,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76917,"byte_end":76926,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77106,"byte_end":77114,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"set_rsv1","qualname":"<Frame>::set_rsv1","value":"fn (&mut self, has_rsv1: bool) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":" Set the first reserved bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77085,"byte_end":77094,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77270,"byte_end":77278,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"name":"set_rsv2","qualname":"<Frame>::set_rsv2","value":"fn (&mut self, has_rsv2: bool) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":" Set the second reserved bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77249,"byte_end":77258,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77433,"byte_end":77441,"line_start":142,"line_end":142,"column_start":12,"column_end":20},"name":"set_rsv3","qualname":"<Frame>::set_rsv3","value":"fn (&mut self, has_rsv3: bool) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":" Set the third reserved bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77412,"byte_end":77421,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77608,"byte_end":77618,"line_start":150,"line_end":150,"column_start":12,"column_end":22},"name":"set_opcode","qualname":"<Frame>::set_opcode","value":"fn (&mut self, opcode: OpCode) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":" Set the OpCode.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77563,"byte_end":77582,"line_start":148,"line_end":148,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77587,"byte_end":77596,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77795,"byte_end":77806,"line_start":158,"line_end":158,"column_start":12,"column_end":23},"name":"payload_mut","qualname":"<Frame>::payload_mut","value":"fn (&mut self) -> &mut Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Edit the frame's payload.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77750,"byte_end":77769,"line_start":156,"line_end":156,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77774,"byte_end":77783,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78182,"byte_end":78190,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"set_mask","qualname":"<Frame>::set_mask","value":"fn (&mut self) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78161,"byte_end":78170,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78514,"byte_end":78525,"line_start":178,"line_end":178,"column_start":12,"column_end":23},"name":"remove_mask","qualname":"<Frame>::remove_mask","value":"fn (&mut self) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78493,"byte_end":78502,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78729,"byte_end":78738,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"into_data","qualname":"<Frame>::into_data","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Consume the frame into its payload.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78844,"byte_end":78851,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"message","qualname":"<Frame>::message","value":"fn (data: Vec<u8>, code: OpCode, finished: bool) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Create a new data frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78823,"byte_end":78832,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":79335,"byte_end":79339,"line_start":211,"line_end":211,"column_start":12,"column_end":16},"name":"pong","qualname":"<Frame>::pong","value":"fn (data: Vec<u8>) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Create a new Pong control frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":79314,"byte_end":79323,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":79557,"byte_end":79561,"line_start":221,"line_end":221,"column_start":12,"column_end":16},"name":"ping","qualname":"<Frame>::ping","value":"fn (data: Vec<u8>) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Create a new Ping control frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":79536,"byte_end":79545,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":79780,"byte_end":79785,"line_start":231,"line_end":231,"column_start":12,"column_end":17},"name":"close","qualname":"<Frame>::close","value":"fn (code: CloseCode, reason: &str) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Create a new Close control frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":79759,"byte_end":79768,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":80210,"byte_end":80215,"line_start":247,"line_end":247,"column_start":12,"column_end":17},"name":"parse","qualname":"<Frame>::parse","value":"fn (cursor: &mut Cursor<Vec<u8>>, max_payload_length: u64) -> Result<Option<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the input stream into a frame.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":84405,"byte_end":84411,"line_start":384,"line_end":384,"column_start":12,"column_end":18},"name":"format","qualname":"<Frame>::format","value":"fn <W> (&mut self, w: &mut W) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a frame out to a buffer\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":458},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":87580,"byte_end":87587,"line_start":20,"line_end":20,"column_start":11,"column_end":18},"name":"Handler","qualname":"::handler::Handler","value":"Handler","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482}],"decl_id":null,"docs":" The core trait of this library.\n Implementing this trait provides the business logic of the WebSocket application.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":87704,"byte_end":87715,"line_start":25,"line_end":25,"column_start":8,"column_end":19},"name":"on_shutdown","qualname":"::handler::Handler::on_shutdown","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called when a request to shutdown all connections has been received.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":87687,"byte_end":87696,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":87961,"byte_end":87968,"line_start":33,"line_end":33,"column_start":8,"column_end":15},"name":"on_open","qualname":"::handler::Handler::on_open","value":"fn (&mut self, shake: Handshake) -> Result<()>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called when the WebSocket handshake is successful and the connection is open for sending\n and receiving messages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":88198,"byte_end":88208,"line_start":41,"line_end":41,"column_start":8,"column_end":18},"name":"on_message","qualname":"::handler::Handler::on_message","value":"fn (&mut self, msg: Message) -> Result<()>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called on incoming messages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":88570,"byte_end":88578,"line_start":49,"line_end":49,"column_start":8,"column_end":16},"name":"on_close","qualname":"::handler::Handler::on_close","value":"fn (&mut self, code: CloseCode, reason: &str) -> ()","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called any time this endpoint receives a close control frame.\n This may be because the other endpoint is initiating a closing handshake,\n or it may be the other endpoint confirming the handshake initiated by this endpoint.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":88760,"byte_end":88768,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"on_error","qualname":"::handler::Handler::on_error","value":"fn (&mut self, err: Error) -> ()","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called when an error occurs on the WebSocket.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":90416,"byte_end":90426,"line_start":97,"line_end":97,"column_start":8,"column_end":18},"name":"on_request","qualname":"::handler::Handler::on_request","value":"fn (&mut self, req: &Request) -> Result<Response>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" A method for handling the low-level workings of the request portion of the WebSocket\n handshake.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":90399,"byte_end":90408,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":91021,"byte_end":91032,"line_start":110,"line_end":110,"column_start":8,"column_end":19},"name":"on_response","qualname":"::handler::Handler::on_response","value":"fn (&mut self, res: &Response) -> Result<()>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" A method for handling the low-level workings of the response portion of the WebSocket\n handshake.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":91004,"byte_end":91013,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":92175,"byte_end":92185,"line_start":146,"line_end":146,"column_start":8,"column_end":18},"name":"on_timeout","qualname":"::handler::Handler::on_timeout","value":"fn (&mut self, event: Token) -> Result<()>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called when a timeout is triggered.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":92158,"byte_end":92167,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":94028,"byte_end":94042,"line_start":199,"line_end":199,"column_start":8,"column_end":22},"name":"on_new_timeout","qualname":"::handler::Handler::on_new_timeout","value":"fn (&mut self, _: Token, _: Timeout) -> Result<()>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called when a timeout has been scheduled on the eventloop.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":94011,"byte_end":94020,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":94866,"byte_end":94874,"line_start":218,"line_end":218,"column_start":8,"column_end":16},"name":"on_frame","qualname":"::handler::Handler::on_frame","value":"fn (&mut self, frame: Frame) -> Result<Option<Frame>>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" A method for handling incoming frames.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":94849,"byte_end":94858,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":96266,"byte_end":96279,"line_start":247,"line_end":247,"column_start":8,"column_end":21},"name":"on_send_frame","qualname":"::handler::Handler::on_send_frame","value":"fn (&mut self, frame: Frame) -> Result<Option<Frame>>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" A method for handling outgoing frames.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":96249,"byte_end":96258,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":97428,"byte_end":97441,"line_start":278,"line_end":278,"column_start":8,"column_end":21},"name":"build_request","qualname":"::handler::Handler::build_request","value":"fn (&mut self, url: &url::Url) -> Result<Request>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" A method for creating the initial handshake request for WebSocket clients.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":97411,"byte_end":97420,"line_start":277,"line_end":277,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1228},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":103879,"byte_end":103888,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"Handshake","qualname":"::handshake::Handshake","value":"Handshake { request, response, peer_addr, local_addr }","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":349},{"krate":0,"index":351},{"krate":0,"index":353}],"decl_id":null,"docs":" A struct representing the two halves of the WebSocket handshake.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":347},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":103953,"byte_end":103960,"line_start":77,"line_end":77,"column_start":9,"column_end":16},"name":"request","qualname":"::handshake::Handshake::request","value":"handshake::Request","parent":{"krate":0,"index":1228},"children":[],"decl_id":null,"docs":" The HTTP request sent to begin the handshake.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":349},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104047,"byte_end":104055,"line_start":79,"line_end":79,"column_start":9,"column_end":17},"name":"response","qualname":"::handshake::Handshake::response","value":"handshake::Response","parent":{"krate":0,"index":1228},"children":[],"decl_id":null,"docs":" The HTTP response from the server confirming the handshake.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":351},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104193,"byte_end":104202,"line_start":82,"line_end":82,"column_start":9,"column_end":18},"name":"peer_addr","qualname":"::handshake::Handshake::peer_addr","value":"std::option::Option<std::net::SocketAddr>","parent":{"krate":0,"index":1228},"children":[],"decl_id":null,"docs":" The socket address of the other endpoint. This address may\n be an intermediary such as a proxy server.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":353},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104277,"byte_end":104287,"line_start":84,"line_end":84,"column_start":9,"column_end":19},"name":"local_addr","qualname":"::handshake::Handshake::local_addr","value":"std::option::Option<std::net::SocketAddr>","parent":{"krate":0,"index":1228},"children":[],"decl_id":null,"docs":" The socket address of this endpoint.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104934,"byte_end":104945,"line_start":101,"line_end":101,"column_start":12,"column_end":23},"name":"remote_addr","qualname":"<Handshake>::remote_addr","value":"fn (&self) -> Result<Option<String>>","parent":null,"children":[],"decl_id":null,"docs":" Get the IP address of the remote connection.","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104903,"byte_end":104922,"line_start":100,"line_end":100,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1234},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105276,"byte_end":105283,"line_start":114,"line_end":114,"column_start":12,"column_end":19},"name":"Request","qualname":"::handshake::Request","value":"Request {  }","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":359}],"decl_id":null,"docs":" The handshake request.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105453,"byte_end":105459,"line_start":122,"line_end":122,"column_start":12,"column_end":18},"name":"header","qualname":"<Request>::header","value":"fn (&self, header: &str) -> Option<&Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get the value of the first instance of an HTTP header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105744,"byte_end":105754,"line_start":130,"line_end":130,"column_start":12,"column_end":22},"name":"header_mut","qualname":"<Request>::header_mut","value":"fn (&mut self, header: &str) -> Option<&mut Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Edit the value of the first instance of an HTTP header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106073,"byte_end":106080,"line_start":140,"line_end":140,"column_start":12,"column_end":19},"name":"headers","qualname":"<Request>::headers","value":"fn (&self) -> &Vec<(String, Vec<u8>)>","parent":null,"children":[],"decl_id":null,"docs":" Access the request headers.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106028,"byte_end":106047,"line_start":138,"line_end":138,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106052,"byte_end":106061,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106229,"byte_end":106240,"line_start":147,"line_end":147,"column_start":12,"column_end":23},"name":"headers_mut","qualname":"<Request>::headers_mut","value":"fn (&mut self) -> &mut Vec<(String, Vec<u8>)>","parent":null,"children":[],"decl_id":null,"docs":" Edit the request headers.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106184,"byte_end":106203,"line_start":145,"line_end":145,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106208,"byte_end":106217,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106419,"byte_end":106425,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"origin","qualname":"<Request>::origin","value":"fn (&self) -> Result<Option<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the origin of the request if it comes from a browser.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106388,"byte_end":106407,"line_start":152,"line_end":152,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106680,"byte_end":106683,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"key","qualname":"<Request>::key","value":"fn (&self) -> Result<&Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get the unhashed WebSocket key sent in the request.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106917,"byte_end":106927,"line_start":168,"line_end":168,"column_start":12,"column_end":22},"name":"hashed_key","qualname":"<Request>::hashed_key","value":"fn (&self) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Get the hashed WebSocket key from this request.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107107,"byte_end":107114,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"version","qualname":"<Request>::version","value":"fn (&self) -> Result<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get the WebSocket protocol version from the request (should be 13).\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107076,"byte_end":107095,"line_start":173,"line_end":173,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107492,"byte_end":107498,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"method","qualname":"<Request>::method","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the request method.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107471,"byte_end":107480,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107630,"byte_end":107638,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"resource","qualname":"<Request>::resource","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the path of the request.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107585,"byte_end":107604,"line_start":192,"line_end":192,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107609,"byte_end":107618,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107782,"byte_end":107791,"line_start":200,"line_end":200,"column_start":12,"column_end":21},"name":"protocols","qualname":"<Request>::protocols","value":"fn (&self) -> Result<Vec<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the possible protocols for the WebSocket connection.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107751,"byte_end":107770,"line_start":199,"line_end":199,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":108225,"byte_end":108237,"line_start":214,"line_end":214,"column_start":12,"column_end":24},"name":"add_protocol","qualname":"<Request>::add_protocol","value":"fn (&mut self, protocol: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a possible protocol to this request.\n This may result in duplicate protocols listed.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":108194,"byte_end":108213,"line_start":213,"line_end":213,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":108646,"byte_end":108661,"line_start":226,"line_end":226,"column_start":12,"column_end":27},"name":"remove_protocol","qualname":"<Request>::remove_protocol","value":"fn (&mut self, protocol: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove a possible protocol from this request.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":108615,"byte_end":108634,"line_start":225,"line_end":225,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":109359,"byte_end":109369,"line_start":246,"line_end":246,"column_start":12,"column_end":22},"name":"extensions","qualname":"<Request>::extensions","value":"fn (&self) -> Result<Vec<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the possible extensions for the WebSocket connection.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":109328,"byte_end":109347,"line_start":245,"line_end":245,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":109907,"byte_end":109920,"line_start":259,"line_end":259,"column_start":12,"column_end":25},"name":"add_extension","qualname":"<Request>::add_extension","value":"fn (&mut self, ext: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a possible extension to this request.\n This may result in duplicate extensions listed. Also, the order of extensions\n indicates preference, so if the preference matters, consider using the\n `Sec-WebSocket-Protocol` header directly.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":109876,"byte_end":109895,"line_start":258,"line_end":258,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":110375,"byte_end":110391,"line_start":272,"line_end":272,"column_start":12,"column_end":28},"name":"remove_extension","qualname":"<Request>::remove_extension","value":"fn (&mut self, ext: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove a possible extension from this request.\n This will remove all configurations of the extension.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":110344,"byte_end":110363,"line_start":271,"line_end":271,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":111596,"byte_end":111607,"line_start":305,"line_end":305,"column_start":12,"column_end":23},"name":"client_addr","qualname":"<Request>::client_addr","value":"fn (&self) -> Result<Option<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the IP address of the client.","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":111565,"byte_end":111584,"line_start":304,"line_end":304,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":112481,"byte_end":112486,"line_start":328,"line_end":328,"column_start":12,"column_end":17},"name":"parse","qualname":"<Request>::parse","value":"fn (buf: &[u8]) -> Result<Option<Request>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to parse an HTTP request from a buffer. If the buffer does not contain a complete\n request, this will return `Ok(None)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":113165,"byte_end":113173,"line_start":347,"line_end":347,"column_start":12,"column_end":20},"name":"from_url","qualname":"<Request>::from_url","value":"fn (url: &url::Url) -> Result<Request>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new WebSocket handshake HTTP request from a url.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":114574,"byte_end":114580,"line_start":389,"line_end":389,"column_start":12,"column_end":18},"name":"format","qualname":"<Request>::format","value":"fn <W> (&self, w: &mut W) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a request out to a buffer\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1240},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":115459,"byte_end":115467,"line_start":424,"line_end":424,"column_start":12,"column_end":20},"name":"Response","qualname":"::handshake::Response","value":"Response {  }","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":371}],"decl_id":null,"docs":" The handshake response.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":115695,"byte_end":115698,"line_start":435,"line_end":435,"column_start":12,"column_end":15},"name":"new","qualname":"<Response>::new","value":"fn <R> (status: u16, reason: R, body: Vec<u8>) -> Response","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic HTTP response with a body.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116044,"byte_end":116048,"line_start":449,"line_end":449,"column_start":12,"column_end":16},"name":"body","qualname":"<Response>::body","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the response body.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116023,"byte_end":116032,"line_start":448,"line_end":448,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116453,"byte_end":116463,"line_start":461,"line_end":461,"column_start":12,"column_end":22},"name":"header_mut","qualname":"<Response>::header_mut","value":"fn (&mut self, header: &str) -> Option<&mut Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Edit the value of the first instance of an HTTP header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116782,"byte_end":116789,"line_start":471,"line_end":471,"column_start":12,"column_end":19},"name":"headers","qualname":"<Response>::headers","value":"fn (&self) -> &Vec<(String, Vec<u8>)>","parent":null,"children":[],"decl_id":null,"docs":" Access the request headers.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116737,"byte_end":116756,"line_start":469,"line_end":469,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116761,"byte_end":116770,"line_start":470,"line_end":470,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116938,"byte_end":116949,"line_start":478,"line_end":478,"column_start":12,"column_end":23},"name":"headers_mut","qualname":"<Response>::headers_mut","value":"fn (&mut self) -> &mut Vec<(String, Vec<u8>)>","parent":null,"children":[],"decl_id":null,"docs":" Edit the request headers.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116893,"byte_end":116912,"line_start":476,"line_end":476,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116917,"byte_end":116926,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117110,"byte_end":117116,"line_start":485,"line_end":485,"column_start":12,"column_end":18},"name":"status","qualname":"<Response>::status","value":"fn (&self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the HTTP status code.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117065,"byte_end":117084,"line_start":483,"line_end":483,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117089,"byte_end":117098,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117243,"byte_end":117253,"line_start":492,"line_end":492,"column_start":12,"column_end":22},"name":"set_status","qualname":"<Response>::set_status","value":"fn (&mut self, status: u16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the HTTP status code.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117198,"byte_end":117217,"line_start":490,"line_end":490,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117222,"byte_end":117231,"line_start":491,"line_end":491,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117401,"byte_end":117407,"line_start":499,"line_end":499,"column_start":12,"column_end":18},"name":"reason","qualname":"<Response>::reason","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the HTTP status reason.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117356,"byte_end":117375,"line_start":497,"line_end":497,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117380,"byte_end":117389,"line_start":498,"line_end":498,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117538,"byte_end":117548,"line_start":506,"line_end":506,"column_start":12,"column_end":22},"name":"set_reason","qualname":"<Response>::set_reason","value":"fn <R> (&mut self, reason: R) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the HTTP status reason.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117493,"byte_end":117512,"line_start":504,"line_end":504,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117517,"byte_end":117526,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117707,"byte_end":117710,"line_start":514,"line_end":514,"column_start":12,"column_end":15},"name":"key","qualname":"<Response>::key","value":"fn (&self) -> Result<&Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get the hashed WebSocket key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117976,"byte_end":117984,"line_start":521,"line_end":521,"column_start":12,"column_end":20},"name":"protocol","qualname":"<Response>::protocol","value":"fn (&self) -> Result<Option<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the protocol that the server has decided to use.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117945,"byte_end":117964,"line_start":520,"line_end":520,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":118278,"byte_end":118290,"line_start":531,"line_end":531,"column_start":12,"column_end":24},"name":"set_protocol","qualname":"<Response>::set_protocol","value":"fn (&mut self, protocol: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the protocol that the server has decided to use.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":118247,"byte_end":118266,"line_start":530,"line_end":530,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":118749,"byte_end":118759,"line_start":543,"line_end":543,"column_start":12,"column_end":22},"name":"extensions","qualname":"<Response>::extensions","value":"fn (&self) -> Result<Vec<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the extensions that the server has decided to use. If these are unacceptable, it is\n appropriate to send an Extension close code.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":118718,"byte_end":118737,"line_start":542,"line_end":542,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":119195,"byte_end":119208,"line_start":557,"line_end":557,"column_start":12,"column_end":25},"name":"add_extension","qualname":"<Response>::add_extension","value":"fn (&mut self, ext: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add an accepted extension to this response.\n This may result in duplicate extensions listed.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":119164,"byte_end":119183,"line_start":556,"line_end":556,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":119665,"byte_end":119681,"line_start":570,"line_end":570,"column_start":12,"column_end":28},"name":"remove_extension","qualname":"<Response>::remove_extension","value":"fn (&mut self, ext: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove an accepted extension from this response.\n This will remove all configurations of the extension.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":119634,"byte_end":119653,"line_start":569,"line_end":569,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":120407,"byte_end":120412,"line_start":590,"line_end":590,"column_start":12,"column_end":17},"name":"parse","qualname":"<Response>::parse","value":"fn (buf: &[u8]) -> Result<Option<Response>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to parse an HTTP response from a buffer. If the buffer does not contain a complete\n response, thiw will return `Ok(None)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":121281,"byte_end":121293,"line_start":613,"line_end":613,"column_start":12,"column_end":24},"name":"from_request","qualname":"<Response>::from_request","value":"fn (req: &Request) -> Result<Response>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new WebSocket handshake HTTP response from a request.\n This will create a response that ignores protocols and extensions. Edit this response to\n accept a protocol and extensions as necessary.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":121839,"byte_end":121845,"line_start":630,"line_end":630,"column_start":12,"column_end":18},"name":"format","qualname":"<Response>::format","value":"fn <W> (&self, w: &mut W) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a response out to a buffer\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":383},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164922,"byte_end":164926,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Text","qualname":"::message::Message::Text","value":"Message::Text(String)","parent":{"krate":0,"index":1258},"children":[],"decl_id":null,"docs":" A text WebSocket message\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":387},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164975,"byte_end":164981,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Binary","qualname":"::message::Message::Binary","value":"Message::Binary(Vec<u8>)","parent":{"krate":0,"index":1258},"children":[],"decl_id":null,"docs":" A binary WebSocket message\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1258},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164875,"byte_end":164882,"line_start":13,"line_end":13,"column_start":10,"column_end":17},"name":"Message","qualname":"::message::Message","value":"Message::{Text, Binary}","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":387}],"decl_id":null,"docs":" An enum representing the various forms of a WebSocket message.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164866,"byte_end":164993,"line_start":13,"line_end":18,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":165084,"byte_end":165088,"line_start":22,"line_end":22,"column_start":12,"column_end":16},"name":"text","qualname":"<Message>::text","value":"fn <S> (string: S) -> Message","parent":null,"children":[],"decl_id":null,"docs":" Create a new text WebSocket message from a stringable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":165282,"byte_end":165288,"line_start":30,"line_end":30,"column_start":12,"column_end":18},"name":"binary","qualname":"<Message>::binary","value":"fn <B> (bin: B) -> Message","parent":null,"children":[],"decl_id":null,"docs":" Create a new binary WebSocket message by converting to Vec<u8>.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":165462,"byte_end":165469,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"is_text","qualname":"<Message>::is_text","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether a message is a text message.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":165655,"byte_end":165664,"line_start":46,"line_end":46,"column_start":12,"column_end":21},"name":"is_binary","qualname":"<Message>::is_binary","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether a message is a binary message.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":165842,"byte_end":165845,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"len","qualname":"<Message>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the WebSocket message.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166145,"byte_end":166153,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Message>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the WebSocket message has no content.\n For example, if the other side of the connection sent an empty string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166340,"byte_end":166346,"line_start":71,"line_end":71,"column_start":12,"column_end":18},"name":"opcode","qualname":"<Message>::opcode","value":"fn (&self) -> OpCode","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166554,"byte_end":166563,"line_start":79,"line_end":79,"column_start":12,"column_end":21},"name":"into_data","qualname":"<Message>::into_data","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Consume the WebSocket and return it as binary data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166792,"byte_end":166801,"line_start":87,"line_end":87,"column_start":12,"column_end":21},"name":"into_text","qualname":"<Message>::into_text","value":"fn (self) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to consume the WebSocket message and convert it to a String.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167119,"byte_end":167126,"line_start":96,"line_end":96,"column_start":12,"column_end":19},"name":"as_text","qualname":"<Message>::as_text","value":"fn (&self) -> Result<&str>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to get a &str from the WebSocket message,\n this will try to convert binary data to utf8.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":391},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169196,"byte_end":169204,"line_start":9,"line_end":9,"column_start":5,"column_end":13},"name":"Continue","qualname":"::protocol::OpCode::Continue","value":"OpCode::Continue","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a continuation frame of a fragmented message.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":393},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169247,"byte_end":169251,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Text","qualname":"::protocol::OpCode::Text","value":"OpCode::Text","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a text data frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":395},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169296,"byte_end":169302,"line_start":13,"line_end":13,"column_start":5,"column_end":11},"name":"Binary","qualname":"::protocol::OpCode::Binary","value":"OpCode::Binary","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a binary data frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":397},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169349,"byte_end":169354,"line_start":15,"line_end":15,"column_start":5,"column_end":10},"name":"Close","qualname":"::protocol::OpCode::Close","value":"OpCode::Close","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a close control frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":399},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169400,"byte_end":169404,"line_start":17,"line_end":17,"column_start":5,"column_end":9},"name":"Ping","qualname":"::protocol::OpCode::Ping","value":"OpCode::Ping","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a ping control frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":401},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169450,"byte_end":169454,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"name":"Pong","qualname":"::protocol::OpCode::Pong","value":"OpCode::Pong","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a pong control frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":403},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169510,"byte_end":169513,"line_start":21,"line_end":21,"column_start":5,"column_end":8},"name":"Bad","qualname":"::protocol::OpCode::Bad","value":"OpCode::Bad","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates an invalid opcode was received.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1278},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169119,"byte_end":169125,"line_start":7,"line_end":7,"column_start":10,"column_end":16},"name":"OpCode","qualname":"::protocol::OpCode","value":"OpCode::{Continue, Text, Binary, Close, Ping, Pong, Bad}","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":395},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":403}],"decl_id":null,"docs":" Operation codes as part of rfc6455.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169110,"byte_end":169516,"line_start":7,"line_end":22,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169110,"byte_end":169516,"line_start":7,"line_end":22,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169602,"byte_end":169612,"line_start":26,"line_end":26,"column_start":12,"column_end":22},"name":"is_control","qualname":"<OpCode>::is_control","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the opcode indicates a control frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":405},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":171258,"byte_end":171264,"line_start":88,"line_end":88,"column_start":5,"column_end":11},"name":"Normal","qualname":"::protocol::CloseCode::Normal","value":"CloseCode::Normal","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates a normal closure, meaning that the purpose for\n which the connection was established has been fulfilled.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":407},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":171406,"byte_end":171410,"line_start":91,"line_end":91,"column_start":5,"column_end":9},"name":"Away","qualname":"::protocol::CloseCode::Away","value":"CloseCode::Away","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is \"going away\", such as a server\n going down or a browser having navigated away from a page.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":409},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":171514,"byte_end":171522,"line_start":94,"line_end":94,"column_start":5,"column_end":13},"name":"Protocol","qualname":"::protocol::CloseCode::Protocol","value":"CloseCode::Protocol","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is terminating the connection due\n to a protocol error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":411},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":171772,"byte_end":171783,"line_start":99,"line_end":99,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::protocol::CloseCode::Unsupported","value":"CloseCode::Unsupported","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is terminating the connection\n because it has received a type of data it cannot accept (e.g., an\n endpoint that understands only text data MAY send this if it\n receives a binary message).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":413},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":172000,"byte_end":172006,"line_start":103,"line_end":103,"column_start":5,"column_end":11},"name":"Status","qualname":"::protocol::CloseCode::Status","value":"CloseCode::Status","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that no status code was included in a closing frame. This\n close code makes it possible to use a single method, `on_close` to\n handle even cases where no close code was provided.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":415},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":172348,"byte_end":172356,"line_start":109,"line_end":109,"column_start":5,"column_end":13},"name":"Abnormal","qualname":"::protocol::CloseCode::Abnormal","value":"CloseCode::Abnormal","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates an abnormal closure. If the abnormal closure was due to an\n error, this close code will not be used. Instead, the `on_error` method\n of the handler will be called with the error. However, if the connection\n is simply dropped, without an error, this close code will be sent to the\n handler.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":417},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":172606,"byte_end":172613,"line_start":114,"line_end":114,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::protocol::CloseCode::Invalid","value":"CloseCode::Invalid","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is terminating the connection\n because it has received data within a message that was not\n consistent with the type of the message (e.g., non-UTF-8 [RFC3629]\n data within a text message).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":419},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":172970,"byte_end":172976,"line_start":120,"line_end":120,"column_start":5,"column_end":11},"name":"Policy","qualname":"::protocol::CloseCode::Policy","value":"CloseCode::Policy","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is terminating the connection\n because it has received a message that violates its policy.  This\n is a generic status code that can be returned when there is no\n other more suitable status code (e.g., Unsupported or Size) or if there\n is a need to hide specific details about the policy.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":421},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173132,"byte_end":173136,"line_start":124,"line_end":124,"column_start":5,"column_end":9},"name":"Size","qualname":"::protocol::CloseCode::Size","value":"CloseCode::Size","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is terminating the connection\n because it has received a message that is too big for it to\n process.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":423},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173611,"byte_end":173620,"line_start":132,"line_end":132,"column_start":5,"column_end":14},"name":"Extension","qualname":"::protocol::CloseCode::Extension","value":"CloseCode::Extension","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint (client) is terminating the\n connection because it has expected the server to negotiate one or\n more extension, but the server didn't return them in the response\n message of the WebSocket handshake.  The list of extensions that\n are needed should be given as the reason for closing.\n Note that this status code is not used by the server, because it\n can fail the WebSocket handshake instead.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":425},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173798,"byte_end":173803,"line_start":136,"line_end":136,"column_start":5,"column_end":10},"name":"Error","qualname":"::protocol::CloseCode::Error","value":"CloseCode::Error","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that a server is terminating the connection because\n it encountered an unexpected condition that prevented it from\n fulfilling the request.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":427},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173983,"byte_end":173990,"line_start":139,"line_end":139,"column_start":5,"column_end":12},"name":"Restart","qualname":"::protocol::CloseCode::Restart","value":"CloseCode::Restart","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that the server is restarting. A client may choose to reconnect,\n and if it does, it should use a randomized delay of 5-30 seconds between attempts.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":429},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":174211,"byte_end":174216,"line_start":143,"line_end":143,"column_start":5,"column_end":10},"name":"Again","qualname":"::protocol::CloseCode::Again","value":"CloseCode::Again","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that the server is overloaded and the client should either connect\n to a different IP (when multiple targets exist), or reconnect to the same IP\n when a user has performed an action.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":431},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":174241,"byte_end":174244,"line_start":145,"line_end":145,"column_start":5,"column_end":8},"name":"Tls","qualname":"::protocol::CloseCode::Tls","value":"CloseCode::Tls","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":433},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":174269,"byte_end":174274,"line_start":147,"line_end":147,"column_start":5,"column_end":10},"name":"Empty","qualname":"::protocol::CloseCode::Empty","value":"CloseCode::Empty","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":435},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":174299,"byte_end":174304,"line_start":149,"line_end":149,"column_start":5,"column_end":10},"name":"Other","qualname":"::protocol::CloseCode::Other","value":"CloseCode::Other(u16)","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1298},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":171112,"byte_end":171121,"line_start":85,"line_end":85,"column_start":10,"column_end":19},"name":"CloseCode","qualname":"::protocol::CloseCode","value":"CloseCode::{Normal, Away, Protocol, Unsupported, Status, Abnormal, Invalid, Policy, Size, Extension, Error, Restart, Again, Tls, Empty, Other}","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":429},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":435}],"decl_id":null,"docs":" Status code used to indicate why an endpoint is closing the WebSocket connection.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":171103,"byte_end":174312,"line_start":85,"line_end":150,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":171103,"byte_end":174312,"line_start":85,"line_end":150,"column_start":1,"column_end":2}}]},{"kind":"Type","id":{"krate":0,"index":942},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":176643,"byte_end":176649,"line_start":20,"line_end":20,"column_start":10,"column_end":16},"name":"Result","qualname":"::result::Result","value":"StdResult<T, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":439},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":177043,"byte_end":177051,"line_start":28,"line_end":28,"column_start":5,"column_end":13},"name":"Internal","qualname":"::result::Kind::Internal","value":"Kind::Internal","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates an internal application error.\n If panic_on_internal is true, which is the default, then the application will panic.\n Otherwise the WebSocket will automatically attempt to send an Error (1011) close code.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":441},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":177307,"byte_end":177315,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"Capacity","qualname":"::result::Kind::Capacity","value":"Kind::Capacity","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates a state where some size limit has been exceeded, such as an inability to accept\n any more new connections.\n If a Connection is active, the WebSocket will automatically attempt to send\n a Size (1009) close code.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":443},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":177557,"byte_end":177565,"line_start":37,"line_end":37,"column_start":5,"column_end":13},"name":"Protocol","qualname":"::result::Kind::Protocol","value":"Kind::Protocol","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates a violation of the WebSocket protocol.\n The WebSocket will automatically attempt to send a Protocol (1002) close code, or if\n this error occurs during a handshake, an HTTP 400 response will be generated.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":445},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":177776,"byte_end":177784,"line_start":41,"line_end":41,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::result::Kind::Encoding","value":"Kind::Encoding(Utf8Error)","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates that the WebSocket received data that should be utf8 encoded but was not.\n The WebSocket will automatically attempt to send a Invalid Frame Payload Data (1007) close\n code.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":449},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":177923,"byte_end":177925,"line_start":44,"line_end":44,"column_start":5,"column_end":7},"name":"Io","qualname":"::result::Kind::Io","value":"Kind::Io(io::Error)","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates an underlying IO Error.\n This kind of error will result in a WebSocket Connection disconnecting.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":453},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":178122,"byte_end":178126,"line_start":48,"line_end":48,"column_start":5,"column_end":9},"name":"Http","qualname":"::result::Kind::Http","value":"Kind::Http(httparse::Error)","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates a failure to parse an HTTP message.\n This kind of error should only occur during a WebSocket Handshake, and a HTTP 500 response\n will be generated.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":457},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":178570,"byte_end":178575,"line_start":54,"line_end":54,"column_start":5,"column_end":10},"name":"Queue","qualname":"::result::Kind::Queue","value":"Kind::Queue(mio::channel::SendError<Command>)","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates a failure to send a signal on the internal EventLoop channel. This means that\n the WebSocket is overloaded. In order to avoid this error, it is important to set\n `Settings::max_connections` and `Settings:queue_size` high enough to handle the load.\n If encountered, retuning from a handler method and waiting for the EventLoop to consume\n the queue may relieve the situation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":461},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179141,"byte_end":179147,"line_start":64,"line_end":64,"column_start":5,"column_end":11},"name":"Custom","qualname":"::result::Kind::Custom","value":"Kind::Custom(Box<StdError + Send + Sync>)","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" A custom error kind for use by applications. This error kind involves extra overhead\n because it will allocate the memory on the heap. The WebSocket ignores such errors by\n default, simply passing them to the Connection Handler.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1320},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":176795,"byte_end":176799,"line_start":24,"line_end":24,"column_start":10,"column_end":14},"name":"Kind","qualname":"::result::Kind","value":"Kind::{Internal, Capacity, Protocol, Encoding, Io, Http, Queue, Custom}","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":449},{"krate":0,"index":453},{"krate":0,"index":457},{"krate":0,"index":461}],"decl_id":null,"docs":" The type of an error, which may indicate other kinds of errors as the underlying cause.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":944},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179291,"byte_end":179296,"line_start":68,"line_end":68,"column_start":12,"column_end":17},"name":"Error","qualname":"::result::Error","value":"Error { kind, details }","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":205}],"decl_id":null,"docs":" A struct indicating the kind of error that has occurred and any precise details of that error.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":203},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179307,"byte_end":179311,"line_start":69,"line_end":69,"column_start":9,"column_end":13},"name":"kind","qualname":"::result::Error::kind","value":"result::Kind","parent":{"krate":0,"index":944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":205},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179327,"byte_end":179334,"line_start":70,"line_end":70,"column_start":9,"column_end":16},"name":"details","qualname":"::result::Error::details","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179382,"byte_end":179385,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"fn <I> (kind: Kind, details: I) -> Error","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179573,"byte_end":179581,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"into_box","qualname":"<Error>::into_box","value":"fn (self) -> Box<StdError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1052},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"/home/maxtnt/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.8.0/src/util.rs","parent":null,"children":[{"krate":0,"index":1054},{"krate":0,"index":1056}],"decl_id":null,"docs":" The util module rexports some tools from mio in order to facilitate handling timeouts.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1104},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1549,"byte_end":1555,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"listen","qualname":"::listen","value":"fn <A, F, H> (addr: A, factory: F) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" A utility function for setting up a WebSocket server.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1106},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2397,"byte_end":2404,"line_start":110,"line_end":110,"column_start":8,"column_end":15},"name":"connect","qualname":"::connect","value":"fn <U, F, H> (url: U, factory: F) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" A utility function for setting up a WebSocket client.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1326},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2896,"byte_end":2904,"line_start":130,"line_end":130,"column_start":12,"column_end":20},"name":"Settings","qualname":"::Settings","value":"Settings { max_connections, queue_size, panic_on_new_connection, panic_on_shutdown, fragments_capacity, fragments_grow, fragment_size, max_fragment_size, in_buffer_capacity, in_buffer_grow, out_buffer_capacity, out_buffer_grow, panic_on_internal, panic_on_capacity, panic_on_protocol, panic_on_encoding, panic_on_queue, panic_on_io, panic_on_timeout, shutdown_on_interrupt, masking_strict, key_strict, method_strict, encrypt_server, tcp_nodelay }","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":467},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":473},{"krate":0,"index":475},{"krate":0,"index":477},{"krate":0,"index":479},{"krate":0,"index":481},{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":513}],"decl_id":null,"docs":" WebSocket settings\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2885,"byte_end":8743,"line_start":130,"line_end":239,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":465},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3237,"byte_end":3252,"line_start":136,"line_end":136,"column_start":9,"column_end":24},"name":"max_connections","qualname":"::Settings::max_connections","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The maximum number of connections that this WebSocket will support.\n The default setting is low and should be increased when expecting more\n connections because this is a hard limit and no new connections beyond\n this limit can be made until an old connection is dropped.\n Default: 100\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":467},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3816,"byte_end":3826,"line_start":144,"line_end":144,"column_start":9,"column_end":19},"name":"queue_size","qualname":"::Settings::queue_size","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The number of events anticipated per connection. The event loop queue size will\n be `queue_size` * `max_connections`. In order to avoid an overflow error,\n `queue_size` * `max_connections` must be less than or equal to `usize::max_value()`.\n The queue is shared between connections, which means that a connection may schedule\n more events than `queue_size` provided that another connection is using less than\n `queue_size`. However, if the queue is maxed out a Queue error will occur.\n Default: 5\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":469},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3938,"byte_end":3961,"line_start":147,"line_end":147,"column_start":9,"column_end":32},"name":"panic_on_new_connection","qualname":"::Settings::panic_on_new_connection","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when unable to establish a new TCP connection.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":471},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4072,"byte_end":4089,"line_start":150,"line_end":150,"column_start":9,"column_end":26},"name":"panic_on_shutdown","qualname":"::Settings::panic_on_shutdown","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when a shutdown of the WebSocket is requested.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":473},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4213,"byte_end":4231,"line_start":153,"line_end":153,"column_start":9,"column_end":27},"name":"fragments_capacity","qualname":"::Settings::fragments_capacity","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The maximum number of fragments the connection can handle without reallocating.\n Default: 10\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":475},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4408,"byte_end":4422,"line_start":157,"line_end":157,"column_start":9,"column_end":23},"name":"fragments_grow","qualname":"::Settings::fragments_grow","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to reallocate when `fragments_capacity` is reached. If this is false,\n a Capacity error will be triggered instead.\n Default: true\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":477},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4555,"byte_end":4568,"line_start":160,"line_end":160,"column_start":9,"column_end":22},"name":"fragment_size","qualname":"::Settings::fragment_size","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The maximum length of outgoing frames. Messages longer than this will be fragmented.\n Default: 65,535\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":479},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4714,"byte_end":4731,"line_start":163,"line_end":163,"column_start":9,"column_end":26},"name":"max_fragment_size","qualname":"::Settings::max_fragment_size","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The maximum length of acceptable incoming frames. Messages longer than this will be rejected.\n Default: unlimited\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":481},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4892,"byte_end":4910,"line_start":167,"line_end":167,"column_start":9,"column_end":27},"name":"in_buffer_capacity","qualname":"::Settings::in_buffer_capacity","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The size of the incoming buffer. A larger buffer uses more memory but will allow for fewer\n reallocations.\n Default: 2048\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":483},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5107,"byte_end":5121,"line_start":171,"line_end":171,"column_start":9,"column_end":23},"name":"in_buffer_grow","qualname":"::Settings::in_buffer_grow","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to reallocate the incoming buffer when `in_buffer_capacity` is reached. If this is\n false, a Capacity error will be triggered instead.\n Default: true\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":485},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5281,"byte_end":5300,"line_start":175,"line_end":175,"column_start":9,"column_end":28},"name":"out_buffer_capacity","qualname":"::Settings::out_buffer_capacity","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The size of the outgoing buffer. A larger buffer uses more memory but will allow for fewer\n reallocations.\n Default: 2048\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":487},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5498,"byte_end":5513,"line_start":179,"line_end":179,"column_start":9,"column_end":24},"name":"out_buffer_grow","qualname":"::Settings::out_buffer_grow","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to reallocate the incoming buffer when `out_buffer_capacity` is reached. If this is\n false, a Capacity error will be triggered instead.\n Default: true\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":489},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5797,"byte_end":5814,"line_start":184,"line_end":184,"column_start":9,"column_end":26},"name":"panic_on_internal","qualname":"::Settings::panic_on_internal","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when an Internal error is encountered. Internal errors should generally\n not occur, so this setting defaults to true as a debug measure, whereas production\n applications should consider setting it to false.\n Default: true\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":491},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5916,"byte_end":5933,"line_start":187,"line_end":187,"column_start":9,"column_end":26},"name":"panic_on_capacity","qualname":"::Settings::panic_on_capacity","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when a Capacity error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":493},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6035,"byte_end":6052,"line_start":190,"line_end":190,"column_start":9,"column_end":26},"name":"panic_on_protocol","qualname":"::Settings::panic_on_protocol","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when a Protocol error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":495},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6155,"byte_end":6172,"line_start":193,"line_end":193,"column_start":9,"column_end":26},"name":"panic_on_encoding","qualname":"::Settings::panic_on_encoding","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when an Encoding error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":497},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6271,"byte_end":6285,"line_start":196,"line_end":196,"column_start":9,"column_end":23},"name":"panic_on_queue","qualname":"::Settings::panic_on_queue","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when a Queue error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":499},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6382,"byte_end":6393,"line_start":199,"line_end":199,"column_start":9,"column_end":20},"name":"panic_on_io","qualname":"::Settings::panic_on_io","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when an Io error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":501},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6492,"byte_end":6508,"line_start":202,"line_end":202,"column_start":9,"column_end":25},"name":"panic_on_timeout","qualname":"::Settings::panic_on_timeout","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when a Timer error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":503},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6619,"byte_end":6640,"line_start":205,"line_end":205,"column_start":9,"column_end":30},"name":"shutdown_on_interrupt","qualname":"::Settings::shutdown_on_interrupt","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to shutdown the eventloop when an interrupt is received.\n Default: true\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":505},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6961,"byte_end":6975,"line_start":210,"line_end":210,"column_start":9,"column_end":23},"name":"masking_strict","qualname":"::Settings::masking_strict","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The WebSocket protocol requires frames sent from client endpoints to be masked as a\n security and sanity precaution. Enforcing this requirement, which may be removed at some\n point may cause incompatibilities. If you need the extra security, set this to true.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":507},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7487,"byte_end":7497,"line_start":217,"line_end":217,"column_start":9,"column_end":19},"name":"key_strict","qualname":"::Settings::key_strict","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The WebSocket protocol requires clients to verify the key returned by a server to ensure\n that the server and all intermediaries can perform the protocol. Verifying the key will\n consume processing time and other resources with the benefit that we can fail the\n connection early. The default in WS-RS is to accept any key from the server and instead\n fail late if a protocol error occurs. Change this setting to enable key verification.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":509},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7901,"byte_end":7914,"line_start":223,"line_end":223,"column_start":9,"column_end":22},"name":"method_strict","qualname":"::Settings::method_strict","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The WebSocket protocol requires clients to perform an opening handshake using the HTTP\n GET method for the request. However, since only WebSockets are supported on the connection,\n verifying the method of handshake requests is not always necessary. To enforce the\n requirement that handshakes begin with a GET method, set this to true.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":511},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8457,"byte_end":8471,"line_start":232,"line_end":232,"column_start":9,"column_end":23},"name":"encrypt_server","qualname":"::Settings::encrypt_server","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Indicate whether server connections should use ssl encryption when accepting connections.\n Setting this to true means that clients should use the `wss` scheme to connect to this\n server. Note that using this flag will in general necessitate overriding the\n `Handler::upgrade_ssl_server` method in order to provide the details of the ssl context. It may be\n simpler for most users to use a reverse proxy such as nginx to provide server side\n encryption.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":513},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8723,"byte_end":8734,"line_start":238,"line_end":238,"column_start":9,"column_end":20},"name":"tcp_nodelay","qualname":"::Settings::tcp_nodelay","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Disables Nagle's algorithm.\n Usually tcp socket tries to accumulate packets to send them all together (every 200ms).\n When enabled socket will try to send packet as fast as possible.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1112},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9874,"byte_end":9883,"line_start":274,"line_end":274,"column_start":12,"column_end":21},"name":"WebSocket","qualname":"::WebSocket","value":"WebSocket {  }","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":243}],"decl_id":null,"docs":" The WebSocket struct. A WebSocket can support multiple incoming and outgoing connections.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10090,"byte_end":10093,"line_start":287,"line_end":287,"column_start":12,"column_end":15},"name":"new","qualname":"<WebSocket<F>>::new","value":"fn (factory: F) -> Result<WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebSocket using the given Factory to create handlers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10530,"byte_end":10534,"line_start":296,"line_end":296,"column_start":12,"column_end":16},"name":"bind","qualname":"<WebSocket<F>>::bind","value":"fn <A> (mut self, addr_spec: A) -> Result<WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Consume the WebSocket and bind to the specified address.\n If the `addr_spec` yields multiple addresses this will return after the\n first successful bind. `local_addr` can be called to determine which\n address it ended up binding to.\n After the server is successfully bound you should start it using `run`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11387,"byte_end":11393,"line_start":321,"line_end":321,"column_start":12,"column_end":18},"name":"listen","qualname":"<WebSocket<F>>::listen","value":"fn <A> (self, addr_spec: A) -> Result<WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Consume the WebSocket and listen for new connections on the specified address.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11742,"byte_end":11749,"line_start":330,"line_end":330,"column_start":12,"column_end":19},"name":"connect","qualname":"<WebSocket<F>>::connect","value":"fn (&mut self, url: url::Url) -> Result<&mut WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Queue an outgoing connection on this WebSocket. This method may be called multiple times,\n but the actual connections will not be established until `run` is called.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12102,"byte_end":12105,"line_start":339,"line_end":339,"column_start":12,"column_end":15},"name":"run","qualname":"<WebSocket<F>>::run","value":"fn (mut self) -> Result<WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Run the WebSocket. This will run the encapsulated event loop blocking the calling thread until\n the WebSocket is shutdown.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12509,"byte_end":12520,"line_start":349,"line_end":349,"column_start":12,"column_end":23},"name":"broadcaster","qualname":"<WebSocket<F>>::broadcaster","value":"fn (&self) -> Sender","parent":null,"children":[],"decl_id":null,"docs":" Get a Sender that can be used to send messages on all connections.\n Calling `send` on this Sender is equivalent to calling `broadcast`.\n Calling `shutdown` on this Sender will shutdown the WebSocket even if no connections have\n been established.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12488,"byte_end":12497,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12796,"byte_end":12806,"line_start":356,"line_end":356,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<WebSocket<F>>::local_addr","value":"fn (&self) -> ::std::io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Get the local socket address this socket is bound to. Will return an error\n if the backend returns an error. Will return a `NotFound` error if\n this WebSocket is not a listening socket.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1338},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13006,"byte_end":13013,"line_start":363,"line_end":363,"column_start":12,"column_end":19},"name":"Builder","qualname":"::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":515}],"decl_id":null,"docs":" Utility for constructing a WebSocket from various settings.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12995,"byte_end":13041,"line_start":363,"line_end":365,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13171,"byte_end":13174,"line_start":370,"line_end":370,"column_start":12,"column_end":15},"name":"new","qualname":"<Builder>::new","value":"fn () -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Create a new Builder with default settings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13373,"byte_end":13378,"line_start":376,"line_end":376,"column_start":12,"column_end":17},"name":"build","qualname":"<Builder>::build","value":"fn <F> (&self, factory: F) -> Result<WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Build a WebSocket using this builder and a factory.\n It is possible to use the same builder to create multiple WebSockets.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13651,"byte_end":13664,"line_start":387,"line_end":387,"column_start":12,"column_end":25},"name":"with_settings","qualname":"<Builder>::with_settings","value":"fn (&mut self, settings: Settings) -> &mut Builder","parent":null,"children":[],"decl_id":null,"docs":" Set the WebSocket settings to use.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14374,"byte_end":14381,"line_start":35,"line_end":35,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14857,"byte_end":14863,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15120,"byte_end":15126,"line_start":66,"line_end":66,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15265,"byte_end":15271,"line_start":72,"line_end":72,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,110,110,101,99,116,105,111,110,46,114,115],"byte_start":21727,"byte_end":21732,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,110,110,101,99,116,105,111,110,46,114,115],"byte_start":22607,"byte_end":22617,"line_start":101,"line_end":101,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":72331,"byte_end":72332,"line_start":104,"line_end":104,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":72865,"byte_end":72866,"line_start":130,"line_end":130,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":74904,"byte_end":74909,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":85756,"byte_end":85761,"line_start":441,"line_end":441,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":86044,"byte_end":86049,"line_start":455,"line_end":455,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":99613,"byte_end":99614,"line_start":341,"line_end":341,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":100065,"byte_end":100066,"line_start":363,"line_end":363,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104317,"byte_end":104326,"line_start":87,"line_end":87,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105369,"byte_end":105376,"line_start":120,"line_end":120,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":114951,"byte_end":114958,"line_start":404,"line_end":404,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":115571,"byte_end":115579,"line_start":431,"line_end":431,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":122252,"byte_end":122260,"line_start":646,"line_end":646,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,105,111,46,114,115],"byte_start":126870,"byte_end":126875,"line_start":66,"line_end":66,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,105,111,46,114,115],"byte_start":127474,"byte_end":127481,"line_start":96,"line_end":96,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":165000,"byte_end":165007,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167313,"byte_end":167320,"line_start":104,"line_end":104,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167430,"byte_end":167437,"line_start":110,"line_end":110,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167549,"byte_end":167556,"line_start":116,"line_end":116,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167662,"byte_end":167669,"line_start":122,"line_end":122,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167773,"byte_end":167780,"line_start":128,"line_end":128,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169523,"byte_end":169529,"line_start":24,"line_end":24,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169763,"byte_end":169769,"line_start":34,"line_end":34,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170175,"byte_end":170181,"line_start":48,"line_end":48,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170697,"byte_end":170703,"line_start":68,"line_end":68,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":174333,"byte_end":174342,"line_start":152,"line_end":152,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":174885,"byte_end":174894,"line_start":175,"line_end":175,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179363,"byte_end":179368,"line_start":73,"line_end":73,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179743,"byte_end":179748,"line_start":92,"line_end":92,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":180026,"byte_end":180031,"line_start":102,"line_end":102,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":180297,"byte_end":180302,"line_start":112,"line_end":112,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":962},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":181604,"byte_end":181609,"line_start":144,"line_end":144,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":181729,"byte_end":181734,"line_start":150,"line_end":150,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":182513,"byte_end":182518,"line_start":168,"line_end":168,"column_start":49,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":182764,"byte_end":182769,"line_start":177,"line_end":177,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":183250,"byte_end":183255,"line_start":197,"line_end":197,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":185264,"byte_end":185265,"line_start":68,"line_end":68,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":185304,"byte_end":185305,"line_start":69,"line_end":69,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":185453,"byte_end":185459,"line_start":78,"line_end":78,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":187493,"byte_end":187499,"line_start":148,"line_end":148,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":190706,"byte_end":190712,"line_start":216,"line_end":216,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8762,"byte_end":8770,"line_start":241,"line_end":241,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9967,"byte_end":9976,"line_start":282,"line_end":282,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13098,"byte_end":13105,"line_start":368,"line_end":368,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":730,"byte_end":734,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1052}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14374,"byte_end":14381,"line_start":35,"line_end":35,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":1148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14857,"byte_end":14863,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":1158},"to":{"krate":2,"index":8386}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15120,"byte_end":15126,"line_start":66,"line_end":66,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":1158},"to":{"krate":2,"index":2402}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15265,"byte_end":15271,"line_start":72,"line_end":72,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":1158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,110,110,101,99,116,105,111,110,46,114,115],"byte_start":21727,"byte_end":21732,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":1164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,99,111,110,110,101,99,116,105,111,110,46,114,115],"byte_start":22607,"byte_end":22617,"line_start":101,"line_end":101,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":72331,"byte_end":72332,"line_start":104,"line_end":104,"column_start":24,"column_end":25},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":71},"to":{"krate":0,"index":256}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":72865,"byte_end":72866,"line_start":130,"line_end":130,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1190},"to":{"krate":0,"index":458}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":74904,"byte_end":74909,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":85756,"byte_end":85761,"line_start":441,"line_end":441,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1204},"to":{"krate":2,"index":2624}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":86044,"byte_end":86049,"line_start":455,"line_end":455,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1204},"to":{"krate":2,"index":8390}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":99613,"byte_end":99614,"line_start":341,"line_end":341,"column_start":21,"column_end":22},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":87},"to":{"krate":0,"index":458}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":100065,"byte_end":100066,"line_start":363,"line_end":363,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":1214},"to":{"krate":0,"index":458}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104317,"byte_end":104326,"line_start":87,"line_end":87,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":1228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105369,"byte_end":105376,"line_start":120,"line_end":120,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":1234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":114951,"byte_end":114958,"line_start":404,"line_end":404,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":1234},"to":{"krate":2,"index":8390}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":115571,"byte_end":115579,"line_start":431,"line_end":431,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":1240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":122252,"byte_end":122260,"line_start":646,"line_end":646,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":1240},"to":{"krate":2,"index":8390}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,105,111,46,114,115],"byte_start":126870,"byte_end":126875,"line_start":66,"line_end":66,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,105,111,46,114,115],"byte_start":127474,"byte_end":127481,"line_start":96,"line_end":96,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":165000,"byte_end":165007,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":1258},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167313,"byte_end":167320,"line_start":104,"line_end":104,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":1258},"to":{"krate":2,"index":2646}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167430,"byte_end":167437,"line_start":110,"line_end":110,"column_start":28,"column_end":35},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":1258},"to":{"krate":2,"index":2646}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167549,"byte_end":167556,"line_start":116,"line_end":116,"column_start":29,"column_end":36},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":1258},"to":{"krate":2,"index":2646}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167662,"byte_end":167669,"line_start":122,"line_end":122,"column_start":24,"column_end":31},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":1258},"to":{"krate":2,"index":2646}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167773,"byte_end":167780,"line_start":128,"line_end":128,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":1258},"to":{"krate":2,"index":8390}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169523,"byte_end":169529,"line_start":24,"line_end":24,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169763,"byte_end":169769,"line_start":34,"line_end":34,"column_start":23,"column_end":29},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1278},"to":{"krate":2,"index":8390}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170175,"byte_end":170181,"line_start":48,"line_end":48,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":1278},"to":{"krate":2,"index":2642}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170697,"byte_end":170703,"line_start":68,"line_end":68,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":1278},"to":{"krate":2,"index":2646}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":174333,"byte_end":174342,"line_start":152,"line_end":152,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1298},"to":{"krate":2,"index":2642}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":174885,"byte_end":174894,"line_start":175,"line_end":175,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":1298},"to":{"krate":2,"index":2646}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179363,"byte_end":179368,"line_start":73,"line_end":73,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179743,"byte_end":179748,"line_start":92,"line_end":92,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":8386}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":180026,"byte_end":180031,"line_start":102,"line_end":102,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":8390}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":180297,"byte_end":180302,"line_start":112,"line_end":112,"column_start":19,"column_end":24},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":944},"to":{"krate":1,"index":2466}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":181604,"byte_end":181609,"line_start":144,"line_end":144,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":2646}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":181729,"byte_end":181734,"line_start":150,"line_end":150,"column_start":32,"column_end":37},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":2646}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":182513,"byte_end":182518,"line_start":168,"line_end":168,"column_start":49,"column_end":54},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":2646}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":182764,"byte_end":182769,"line_start":177,"line_end":177,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":2646}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":183250,"byte_end":183255,"line_start":197,"line_end":197,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":2646}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":184213,"byte_end":184217,"line_start":31,"line_end":31,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":4368},"to":{"krate":0,"index":1012}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":184946,"byte_end":184951,"line_start":53,"line_end":53,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4398},"to":{"krate":0,"index":1016}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":185264,"byte_end":185265,"line_start":68,"line_end":68,"column_start":34,"column_end":35},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":217},"to":{"krate":0,"index":1012}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":185304,"byte_end":185305,"line_start":69,"line_end":69,"column_start":36,"column_end":37},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":219},"to":{"krate":0,"index":1016}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":185453,"byte_end":185459,"line_start":78,"line_end":78,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":1026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":187493,"byte_end":187499,"line_start":148,"line_end":148,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":1026},"to":{"krate":1,"index":4368}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":190706,"byte_end":190712,"line_start":216,"line_end":216,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":1026},"to":{"krate":1,"index":4398}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8762,"byte_end":8770,"line_start":241,"line_end":241,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":1326},"to":{"krate":2,"index":2624}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9967,"byte_end":9976,"line_start":282,"line_end":282,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":1112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,109,97,120,116,110,116,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,56,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13098,"byte_end":13105,"line_start":368,"line_end":368,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":1338},"to":{"krate":4294967295,"index":4294967295}}]}